services:
  main_service:
    build:
      context: .
      dockerfile: Dockerfile
      target: main_service
    image: main_service:latest
    container_name: main_service
    environment:
      SPRING_R2DBC_URL: r2dbc:postgresql://db:5432/shop_db
      SPRING_R2DBC_USERNAME: postgres
      SPRING_R2DBC_PASSWORD: postgres
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_USERNAME: default
      SPRING_DATA_REDIS_PASSWORD: redis
      SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER_URI: http://keycloak:8080/realms/shop
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_CLIENT_ID: shop-client
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_CLIENT_SECRET: shop-secret
    ports:
      - "8080:8080"
    networks:
      - shop_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      keycloak:
        condition: service_healthy

  payment:
    build:
      context: .
      dockerfile: Dockerfile
      target: payment
    image: payment:latest
    container_name: payment
    environment:
      SPRING_R2DBC_URL: r2dbc:postgresql://db:5432/shop_db
      SPRING_R2DBC_USERNAME: postgres
      SPRING_R2DBC_PASSWORD: postgres
    ports:
      - "8081:8081"
    networks:
      - shop_network
    depends_on:
      db:
        condition: service_healthy

  keycloak:
    image: quay.io/keycloak/keycloak:23.0.0
    container_name: shop_keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://db:5432/shop_db
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres
      KC_HEALTH_ENABLED: true
    command:
      - start-dev
      - --import-realm
    volumes:
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
    ports:
      - "8082:8080"
    networks:
      - shop_network
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 10s
      timeout: 5s
      retries: 5

  db:
    image: postgres:17
    container_name: shop_db
    environment:
      POSTGRES_DB: shop_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - shop_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: shop_redis
    ports:
      - "6379:6379"
    networks:
      - shop_network
    volumes:
      - redis_data:/data
    command: redis-server --protected-mode no
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5

networks:
  shop_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local